'use client'

import { useState } from 'react'
import { XMarkIcon } from '@heroicons/react/24/solid'

interface HashtagManagerProps {
  hashtags: string[]
  onChange: (hashtags: string[]) => void
  loading?: boolean
  maxTags?: number
}

export default function HashtagManager({ 
  hashtags, 
  onChange, 
  loading = false,
  maxTags = 20 
}: HashtagManagerProps) {
  const [inputValue, setInputValue] = useState('')
  const [error, setError] = useState<string | null>(null)

  const addHashtag = () => {
    const trimmed = inputValue.trim()
    
    if (!trimmed) return
    
    if (hashtags.includes(trimmed)) {
      setError('이미 추가된 태그입니다.')
      return
    }
    
    if (hashtags.length >= maxTags) {
      setError(`최대 ${maxTags}개까지 추가 가능합니다.`)
      return
    }
    
    onChange([...hashtags, trimmed])
    setInputValue('')
    setError(null)
  }

  const removeHashtag = (tag: string) => {
    onChange(hashtags.filter(t => t !== tag))
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      e.preventDefault()
      addHashtag()
    }
  }

  // Categorize hashtags
  const autoGeneratedTags = hashtags.filter(tag => 
    tag.includes('대학') || tag.includes('회사') || 
    ['개발자', '디자이너', '마케터', 'PM', 'CEO', 'CTO'].some(role => tag.includes(role))
  )
  
  const customTags = hashtags.filter(tag => !autoGeneratedTags.includes(tag))

  return (
    <div className="space-y-4">
      {loading && (
        <div className="text-sm text-gray-500">
          태그를 자동 생성 중입니다...
        </div>
      )}

      {autoGeneratedTags.length > 0 && (
        <div>
          <h4 className="text-sm font-medium text-gray-700 mb-2">
            자동 생성된 태그
          </h4>
          <div className="flex flex-wrap gap-2">
            {autoGeneratedTags.map((tag) => (
              <span
                key={tag}
                className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800"
              >
                {tag}
                <button
                  type="button"
                  onClick={() => removeHashtag(tag)}
                  className="ml-1.5 inline-flex items-center justify-center w-4 h-4 rounded-full hover:bg-blue-200"
                >
                  <XMarkIcon className="w-3 h-3" />
                </button>
              </span>
            ))}
          </div>
        </div>
      )}

      {customTags.length > 0 && (
        <div>
          <h4 className="text-sm font-medium text-gray-700 mb-2">
            사용자 추가 태그
          </h4>
          <div className="flex flex-wrap gap-2">
            {customTags.map((tag) => (
              <span
                key={tag}
                className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800"
              >
                {tag}
                <button
                  type="button"
                  onClick={() => removeHashtag(tag)}
                  className="ml-1.5 inline-flex items-center justify-center w-4 h-4 rounded-full hover:bg-green-200"
                >
                  <XMarkIcon className="w-3 h-3" />
                </button>
              </span>
            ))}
          </div>
        </div>
      )}

      <div>
        <div className="flex gap-2">
          <input
            type="text"
            value={inputValue}
            onChange={(e) => {
              setInputValue(e.target.value)
              setError(null)
            }}
            onKeyPress={handleKeyPress}
            placeholder="태그 추가 (예: React, 스타트업)"
            className="flex-1 rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
            disabled={hashtags.length >= maxTags}
          />
          <button
            type="button"
            onClick={addHashtag}
            disabled={hashtags.length >= maxTags || !inputValue.trim()}
            className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            추가
          </button>
        </div>
        
        {error && (
          <p className="mt-1 text-sm text-red-600">{error}</p>
        )}
        
        <p className="mt-1 text-sm text-gray-500">
          {hashtags.length}/{maxTags}개 태그 사용 중
        </p>
      </div>

      {hashtags.length === 0 && !loading && (
        <div className="text-sm text-gray-500 italic">
          경력과 학력을 입력하면 관련 태그가 자동으로 생성됩니다.
        </div>
      )}
    </div>
  )
}